#!/usr/bin/php
<?php
/*
 * Copyright (C) 2013-2014 RuneAudio Team
 * http://www.runeaudio.com
 *
 * RuneUI
 * copyright (C) 2013-2014 - Andrea Coiutti (aka ACX) & Simone De Gregori (aka Orion)
 *
 * RuneOS
 * copyright (C) 2013-2014 - Simone De Gregori (aka Orion) & Carmelo San Giovanni (aka Um3ggh1U)
 *
 * RuneAudio website and logo
 * copyright (C) 2013-2014 - ACX webdesign (Andrea Coiutti)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RuneAudio; see the file COPYING.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 *  file: command/debug_collector
 *  version: 1.3
 *  coder: Simone De Gregori
 *
 */
// common include
ini_set('display_errors', '1');
ini_set('error_reporting', -1);
ini_set('error_log', '/var/log/runeaudio/debug_collector.log');
require_once('/var/www/app/libs/runeaudio.php');
// Connect to Redis backend
$redis = new Redis();
$redis->connect('/run/redis/socket');
function debug_data($redis)
{
    $output = "\n";
    $output .= "###### System info ######\n";
    $output .=  file_get_contents('/proc/version')."\n";
    $output .= "Hardware model:\t".implode('\n', sysCmd('cat /proc/device-tree/model'))."\n";
    $bit = ' '.sysCmd('uname -m')[0];
    if (strpos($bit, '64')) {
        $bit = ' (64 bit)';
    } else if (strpos($bit, '7')) {
        $bit = ' (32 bit)';
    } else {
        $bit = '';
    }
    $output .= "Linux version:\t".implode('\n', sysCmd('uname -r')).$bit."\n";
    unset($bit);
    $output .= "System time:\t".implode('\n', sysCmd('date'))."\n";
    $output .= "System load:\t".file_get_contents('/proc/loadavg');
    $output .= "HW platform:\t".$redis->get('hwplatform')." (".$redis->get('hwplatformid').")\n";
    $command = sysCmd("grep -i 'RuneOS:' /etc/motd | cut -d ':' -f 2");
    $output .= "RuneOS:\t\t".trim($command[0])."\n";
    unset($command);
    $output .= "RuneUI:\t\t".$redis->get('buildversion')."-".$redis->get('patchlevel')."\n";
    $output .= "Git Branch:\t".$redis->hget('git', 'branch')."\n";
    $output .= "PlayerID:\t".$redis->get('playerid')."\n\n\n";
    $output .= "###### CPU temperature, throttling & power supply voltage status ######\n";
    $command = sysCmd("/opt/vc/bin/vcgencmd measure_temp");
    $output .= "CPU Temperature: \t".preg_replace('/[^0-9.]/', '', $command[0])."'C\n";
    unset($command);
    $command = sysCmd("/opt/vc/bin/vcgencmd get_throttled");
    if (strpos(' ' .$command[0],'0x0')) {
        // $command = str_split(str_repeat("0", 20));
        $output .= "Status:\t\t\tNo issues to report\n";
    } else {
        $command = sysCmd("/opt/vc/bin/vcgencmd get_config int | grep -i temp_limit");
        $output .= "Temperature limit: \t".preg_replace('/[^0-9.]/', '', $command[0])."'C\n";
        $command = str_split(base_convert($command[0], 16, 2));
        $output .= "Temperature status:\t";
        if ($command[3]) {
            $output .= "Currently temperature limit reached!!\n";
        } else if ($command[19]) {
            $output .= "Temperature limit reached since last reboot\n";
        } else {
            $output .= "No temperature limit reached since last reboot\n";
        }
        $output .= "Throttling status:\t";
        if ($command[2]) {
            $output .= "Currently throttled!!\n";
        } else if ($command[18]) {
            $output .= "Throttling has occurred since last reboot!\n";
        } else {
            $output .= "No throttling has occurred since last reboot\n";
        }
        $output .= "ARM frequency status:\t";
        if ($command[1]) {
            $output .= "Currently arm frequency capped!!\n";
        } else if ($command[17]) {
            $output .= "Arm frequency capping has occurred since last reboot!\n";
        } else {
            $output .= "No arm frequency capping has occurred since last reboot\n";
        }
        $output .= "Under-voltage status:\t";
        if ($command[0]) {
            $output .= "Currently under-voltage!!\n";
        } else if ($command[16]) {
            $output .= "Under-voltage has occurred since last reboot!\n";
        } else {
            $output .= "No under-voltage has occurred since last reboot\n";
        }
    }
    $output .= "\n\n";
    unset($command);
    $output .= "###### Boot configuration (cat /boot/config.txt) ######\n";
    $command = sysCmd("grep -v -e '^[[:space:]]*$' /boot/config.txt | grep -v '#.*='");
    $output .= implode("\n", $command)."\n";
    unset($command);
    $output .= "##################################################\n\n\n";
    $output .= "###### System load statistics (procinfo -H) ######\n";
    $command = sysCmd('procinfo -H');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Active processes (pstree) ######\n";
    $command = sysCmd('pstree');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Audio backend ######\n";
    $output .=  file_get_contents('/proc/asound/version');
    $output .= "\n";
    $output .= "Card list: (/proc/asound/cards)\n";
    $output .= "--------------------------------------------------\n";
    $output .=  file_get_contents('/proc/asound/cards');
    $output .= "\n\n";
    $output .= "PLAYBACK devices: (aplay -l)\n";
    $output .= "--------------------------------------------------\n";
    $output .= implode("\n", sysCmd('aplay -l'));
    $output .= "\n\n\n";
    $output .= "PCM devices: (aplay -L)\n";
    $output .= "--------------------------------------------------\n";
    $output .= implode("\n", sysCmd('aplay -L'));
    $output .= "\n\n\n";
    $output .= "Simple mixer controls: (amixer scontrols)\n";
    $output .= "--------------------------------------------------\n";
    $acards = sysCmd("grep : /proc/asound/cards | cut -d ' ' -f 2");
    foreach ($acards as $card) {
        $output .= "card ".$card.":\n";
        $command = implode("\n", sysCmd('amixer -c '.$card.' scontrols'));
        if (!empty($command)) { $output .= $command; } else { $output .= 'no mixer scontrols'; }
        unset($command);
        $output .= "\n\n";
    }
    $output .= "\n";
    $output .= "Mixer controls: (amixer controls)\n";
    $output .= "--------------------------------------------------\n";
    foreach ($acards as $card) {
        $output .= "card ".$card.":\n";
        $command = implode("\n", sysCmd('amixer -c '.$card.' controls'));
        if (!empty($command)) { $output .= $command; } else { $output .= 'no mixer controls'; }
        unset($command);
        $output .= "\n\n";
    }
    $output .= "\n";
    unset($command, $acards, $card);
    $output .= "MPD audio outputs status: (mpc outputs)\n";
    $output .= "--------------------------------------------------\n";
    $command = implode("\n", sysCmd('mpc outputs'));
    $output .= $command;
    unset($command);
    $output .= "\n\n\n";
    // TODO: better collect stream info
    // $output .= "ALSA interface #0: (/proc/asound/card0/pcm0p/info)\n";
    // $output .= "--------------------------------------------------\n";
    // $output .=  file_get_contents('/proc/asound/card0/pcm0p/info');
    // $output .= "\n";
    // $output .= "ALSA interface #1: (/proc/asound/card1/pcm0p/info)\n";
    // $output .= "--------------------------------------------------\n";
    // $output .=  file_get_contents('/proc/asound/card1/pcm0p/info');
    // $output .= "\n";
    // $output .= "interface #0 stream status: (/proc/asound/card0/stream0)\n";
    // $output .= "--------------------------------------------------------\n";
    // $streaminfo = file_get_contents('/proc/asound/card0/stream0');
    // if (empty($streaminfo)) {
    // $output .= "no stream present\n";
    // } else {
    // $output .= $streaminfo;
    // }
    // $output .= "\n";
    // $output .= "interface #1 stream status: (/proc/asound/card1/stream0)\n";
    // $output .= "--------------------------------------------------------\n";
    // $streaminfo = file_get_contents('/proc/asound/card1/stream0');
    // if (empty($streaminfo)) {
    // $output .= "no stream present\n";
    // } else {
    // $output .= $streaminfo;
    // }
    $output .= "###### MPD statistics: (mpc stats) ######\n";
    $command = implode("\n", sysCmd('mpc stats'));
    $output .= $command;
    unset($command);
    $output .= "\n\n\n";
    $command = implode("\n", sysCmd('mpd --version'));
    $output .= "###### mpd version (mpd --version) ######\n";
    $output .= $command;
    $output .= "\n\n\n";
    $output .= "###### MPD configuration (cat /etc/mpd.conf) ######\n";
    $output .= file_get_contents('/etc/mpd.conf');
    $output .= "##################################################\n\n\n";
    $output .= "###### Kernel optimization parameters ######\n";
    $output .= "hardware platform:\t".$redis->get('hwplatform')."\n";
    $output .= "current orionprofile:\t".$redis->get('orionprofile')."\n";
    $output .= "\n\n";
    //         $output .=  "kernel scheduler for mmcblk0:\t\t".((empty(file_get_contents('/sys/block/mmcblk0/queue/scheduler'))) ? "\n" : file_get_contents('/sys/block/mmcblk0/queue/scheduler'));
    $output .=  "kernel scheduler for mmcblk0:\t\t\t".file_get_contents('/sys/block/mmcblk0/queue/scheduler');
    $output .=  "/proc/sys/vm/swappiness:\t\t\t".file_get_contents('/proc/sys/vm/swappiness');
    $output .=  "/proc/sys/kernel/sched_latency_ns:\t\t".file_get_contents('/proc/sys/kernel/sched_latency_ns');
    $output .=  "/proc/sys/kernel/sched_rt_period_us:\t\t".file_get_contents('/proc/sys/kernel/sched_rt_period_us');
    $output .=  "/proc/sys/kernel/sched_rt_runtime_us:\t\t".file_get_contents('/proc/sys/kernel/sched_rt_runtime_us');
    $output .=  "/proc/sys/kernel/sched_autogroup_enabled:\t".file_get_contents('/proc/sys/kernel/sched_autogroup_enabled');
    $output .=  "/proc/sys/kernel/sched_rr_timeslice_ms:\t\t".file_get_contents('/proc/sys/kernel/sched_rr_timeslice_ms');
    $output .=  "/proc/sys/kernel/sched_min_granularity_ns:\t".file_get_contents('/proc/sys/kernel/sched_min_granularity_ns');
    $output .=  "/proc/sys/kernel/sched_wakeup_granularity_ns:\t".file_get_contents('/proc/sys/kernel/sched_wakeup_granularity_ns');
    $output .= "\n\n";
    $output .= "###### Kernel module snd_usb_audio settings ######\n";
    $command = sysCmd('systool -v -m snd_usb_audio | grep -vi error');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    $output .= "###### Systemd active startup scripts (ls -l /etc/systemd/system/multi-user.target.wants/) ######\n";
    $command = sysCmd('ls -l /etc/systemd/system/multi-user.target.wants/ | grep -vi total');
    $output .= implode("\n", $command)."\n\n\n";
    $output .= "###### Systemd enabled services (systemctl list-unit-files | grep enabled) ######\n";
    $command = sysCmd("systemctl list-unit-files | grep -E '.service|STATE' | grep -E 'enabled[ ]{7}|enabled-|STATE'");
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Filesystem mounts (cat /proc/mounts) ######\n";
    $output .=  file_get_contents('/proc/mounts')."\n\n";
    $output .= "###### Filesystem mounts - free space (df -h) ######\n";
    $command = sysCmd('df -h');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    // clear the cache otherwise file_exists() returns incorrect values
    clearstatcache(true, '/usr/bin/parted');
    if (file_exists('/usr/bin/parted')) {
        $output .= "###### Filesystem mounts - partitions (parted -ls) ######\n";
        $command = sysCmd('parted -ls');
        $output .= implode("\n", $command)."\n";
        unset($command);
    }
    // clear the cache otherwise file_exists() returns incorrect values
    clearstatcache(true, '/usr/bin/smartctl');
    if (file_exists('/usr/bin/smartctl')) {
        $drive_list = sysCmd('smartctl --scan-open -- -H -i | grep -v aborted');
        if (!empty($drive_list)) {
            foreach($drive_list as $drive) {
                $drive = trim($drive);
                if ($drive != "") {
                    $drive = "smartctl ".$drive." | grep -E 'Model:|Capacity:|-health self-|SMART support is'";
                    $output .= "###### Hard Disk Drive - SMART Health Check (".$drive.") ######\n";
                    $command = sysCmd($drive);
                    $output .= implode("\n", $command)."\n\n";
                    unset($command);
                }
            }
            unset($drive);
            unset($drive_list);
            $output .= "\n";
        }
    }
    $output .= "###### Loaded kernel modules (lsmod) ######\n";
    $command = sysCmd('lsmod');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Network, listening sockets (netstat -lnp) ######\n";
    $command = sysCmd('netstat -lnp');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Network, established sockets (netstat -np) ######\n";
    $command = sysCmd('netstat -np');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Network, all interfaces (ip -h link) ######\n";
    $command = sysCmd('ip -h link');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    $output .= "###### Network, connected interfaces (ip -s -h -d addr) ######\n";
    $command = sysCmd('ip -s -h -d addr');
    $output .= implode("\n", $command)."\n\n\n";
    unset($command);
    $output .= "###### Network, network profiles (connmanctl services) ######\n";
    $command = sysCmd('connmanctl services | grep "*"');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    $command = sysCmd('connmanctl services | grep "*" | cut -b 26-');
    foreach ($command as $interface) {
        $interface = trim($interface);
        // clear the cache otherwise file_exists() returns incorrect values
        clearstatcache(true, '/var/lib/connman/'.$interface.'/settings');
        if (file_exists('/var/lib/connman/'.$interface.'/settings')) {
            $output .= "# favourite connman profile ".$interface." #\n";
            $output .= str_repeat('-',strlen($interface)+30)."\n";
            $command = sysCmd('cat /var/lib/connman/'.$interface.'/settings | sed s/^Passphrase.*/Passphrase=***************/g');
            $output .= implode("\n", $command)."\n\n";
        }
    }
    $output .= "\n";
    $output .= "###### Network, wifi status (iwconfig) ######\n";
    $command = sysCmd('iwconfig');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    $output .= "###### Network, WiFi Access Point (redis-cli hgetall AccessPoint) ######\n";
    $command = $redis->hgetall('AccessPoint');
    foreach ($command as $key => $value) {
        $output .= $key.': '.$value."\n";
    }
    $output .= "\n\n";
    unset($command, $key, $value);
    $output .= "###### Rern's Addons (redis-cli hgetall addons) ######\n";
    $command = $redis->hgetall('addons');
    foreach ($command as $key => $value) {
        $output .= $key.': '.$value."\n";
    }
    $output .= "\n\n";
    unset($command, $key, $value);
    unset($command);
    $output .= "###### List all USB devices (lsusb) ######\n";
    $command = sysCmd('lsusb');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    $output .= "###### Kernel status (dmesg) ######\n";
    $command = sysCmd('dmesg');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    $output .= "###### startup systemd (journal) messages (journalctl | grep -i -E 'start|stop|reached|error|warning|loaded|loading' | grep -i -v 'audit' | head -n 200) ######\n";
    $command = sysCmd('journalctl | grep -i -E "start|stop|reached|error|warning|loaded|loading" | grep -i -v "audit" | head -n 200');
    $output .= implode("\n", $command)."\n\n";
    unset($command);
    // $output .= "###### latest systemd (journal) messages (journalctl | tail -n 50) ######\n";
    // $command = sysCmd('journalctl | tail -n 50');
    // $output .= implode("\n", $command)."\n\n";
    // unset($command);
    $output .= "###### PHP backend ######\n";
    $output .= "php version:\t".phpversion()."\n";
    $output .= "debug level:\t".$redis->get('debug')."\n";
    $output .= "\n\n";
    // $output .= "###### SESSION ######\n";
    // $output .= "\n";
    // $output .= "STATUS:\t\t".session_status()."\n";
    // $output .= "ID:\t\t".session_id()."\n";
    // $output .= "SAVE PATH:\t".session_save_path()."\n";
    // $output .= "\n";
    // $output .= "\n";
    // $output .= "###### SESSION DATA ######\n";
    // $output .= "\n";
    // $output .= print_r($_SESSION);
    $output .= "Debug data collected in ".round((microtime(true) - $_SERVER['REQUEST_TIME_FLOAT']),3)." seconds. ";
    // $output .= "\n";
    // $output .= "\n";
    return $output;
}
$redis->set('debugdata', debug_data($redis));
$redis->close();
