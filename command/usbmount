#!/usr/bin/php
<?php
/*
 * Copyright (C) 2013-2014 RuneAudio Team
 * http://www.runeaudio.com
 *
 * RuneUI
 * copyright (C) 2013-2014 - Andrea Coiutti (aka ACX) & Simone De Gregori (aka Orion)
 *
 * RuneOS
 * copyright (C) 2013-2014 - Simone De Gregori (aka Orion) & Carmelo San Giovanni (aka Um3ggh1U)
 *
 * RuneAudio website and logo
 * copyright (C) 2013-2014 - ACX webdesign (Andrea Coiutti)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RuneAudio; see the file COPYING.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 *  file: command/usbmount
 *  version: 1.3
 *  coder: Simone De Gregori
 *
 */
// common include
ini_set('display_errors', '1');
ini_set('error_reporting', -1);
ini_set('error_log','/var/log/runeaudio/usbmount.log');
// RuneAudio Library include
require_once('/srv/http/app/libs/runeaudio.php');
// Connect to Redis backend include
require_once('/srv/http/app/libs/openredis.php');
//
// when requested run this file asynchronously
if (isset($argv[1]) && ($argv[1] == 'async')) {
    sysCmdAsync($redis, 'nice --adjustment=10 /srv/http/command/usbmount');
    exit(0);
}
//
// when requested run this file asynchronously
if (isset($argv[1]) && ($argv[1] == 'asyncnow')) {
    sysCmdAsync($redis, 'nice --adjustment=10 /srv/http/command/usbmount', 0);
    exit(0);
}
// handle HFS+ mount
if (strpos(file_get_contents('/proc/mounts'), '/mnt/MPD/USB/EFI vfat')) {
    sysCmd('devmon --unmount /mnt/MPD/USB/EFI');
}
//
// sleep for 5 seconds to allow devmon and udevil to complete mounting, don't sleep when nowait is given as a parameter
if (!isset($argv[1]) || ($argv[1] != 'nowait')) {
    // nowait not specified
    sleep(5);
}
//
// remove 'ghost' usb mounts
// use udevil clean to remove any ghost entries
sysCmd('udevil clean');
//
// remove invalid mount point info in redis
// get a list of mounted devices
$usbMountedList = sysCmd("df -hl | grep '/mnt/MPD/USB'");
// get the redis list of mounted devices
$usbMounts = $redis->hgetall('usbmounts');
// walk through the usb mount list
foreach ($usbMounts as $key => $usbMount) {
    foreach ($usbMountedList as $usbMounted) {
        if (strpos(' '.$usbMounted, $key)) {
            // this one is mounted, continue the outside loop
            continue 2;
        }
    }
    // this one has not been found, delete it from redis
    $redis->hDel('usbmounts', $key);
}
// remove invalid unmounted device info in redis
// get a list of usb devices
$usbDevices = sysCmd('dir /dev/sd* -1');
// get the redis list of unmounted devices
$usbUnMounts = $redis->hgetall('usbunmounts');
// walk through the usb unmount list
foreach ($usbUnMounts as $key => $usbUnMount) {
    foreach ($usbDevices as $usbDevice) {
        $usbDevice = trim($usbDevice);
        if (strlen($usbDevice) < 9) {
            // the is a usb device root, real devices have a string length of 9 (or more), e.g. /dev/sda1
            continue;
        }
        if (trim($key) == $usbDevice) {
            // this one is available, continue the outside loop
            continue 2;
        }
    }
    // this one has not been found, its been removed, delete it from redis
    $redis->hDel('usbunmounts', $key);
}
//
// mount any unmounted devices, providing they are not in the unmounted list
// get a list of usb devices
$usbDevices = sysCmd('dir /dev/sd* -1');
// get the list of unmounted usb devices
$usbUnMounts = $redis->hgetall('usbunmounts');
// get a list of mounted devices
$usbMountedList = sysCmd("df -hl | grep '/mnt/MPD/USB'");
// walk through the usb devices, attempting to mount unmounted devices
foreach ($usbDevices as $usbDevice) {
    $usbDevice = trim($usbDevice);
    if (strlen($usbDevice) < 9) {
        // the is a usb device root, real devices have a string length of 9 (or more), e.g. /dev/sda1
        continue;
    }
    foreach ($usbUnMounts as $key => $usbUnMount) {
        // check that this device has not been unmounted
        echo "key: '".$key."'\n";
        echo "usbDevice: '".$usbDevice."'\n";
        if (trim($key) == $usbDevice) {
            // skip this one it's been unmounted, continue in the outside loop
            continue 2;
        }
    }
    foreach ($usbMountedList as $usbMounted) {
        if (strpos(' '.$usbMounted, $usbDevice)) {
            // skip this one, it is mounted, continue the outside loop
            continue 2;
        }
    }
    // this one has not been mounted, try mounting it with udevil
    sysCmd('udevil mount '.$usbDevice);
    sleep(5);
}
//
// store all the mounted device information in redis
// get the mounted usb devices
$usbMounts = sysCmd("df -hl | grep '/mnt/MPD/USB'");
// walk through the
foreach ($usbMounts as $usbMount) {
    // replace whitespace with single space and trim the usb mount information
    //  this will also convert multiple spaces in the mount name to single spaces
    $usbMount = trim(preg_replace('!\s+!', ' ', $usbMount));
    // get the details, the mount name can contain spaces so limit the explode to 6 fields
    unset($device, $size, $used, $avail, $use, $name);
    list($device, $size, $used, $avail, $use, $name) = explode(' ', $usbMount, 6);
    // save the values
    if (isset($name) && strlen($name)) {
        // it's a valid set of data
        $redis->hSet('usbmounts', $device, json_encode(array('device' => $device, 'size' => $size, 'use' => $use, 'name' => substr($name, 9))));
        // anything which is mounted should be removed from the unmounted list
        $redis->hDel('usbunmounts', $key);
    }
    // debug
    // echo "usbMount: '".$usbMount."'\n";
    runelog('[usbmount] usbMount: ', $usbMount);
}
// set file protection and ownership of USB mounts
sysCmd('chown mpd.audio /mnt/MPD/USB ; chown mpd.audio /mnt/MPD/USB/*');
sysCmd('chmod 777 /mnt/MPD/USB ; chmod 777 /mnt/MPD/USB/*');
// remove 'ghost' usb mounts
// use udevil clean to remove any ghost entries
sysCmd('udevil clean');
// check if usb autorebuild is set
if ($redis->get('usb_db_autorebuild')) {
    // update MPD database
    $retval = sysCmd('mpc update USB');
    if (isset($retval) && is_array($retval) && strpos(' '.$retval[0], 'error')) {
        // mpc has returned an error, mpd is probably starting up
        //  set redis variable 'usb_db_autorebuild_retry' which will be acted on by rune_SY_wrk
        $redis->set('usb_db_autorebuild_retry', 1);
    }
}
// update library panel to display the new mount
ui_libraryHome($redis);
// restart Samba in order to pick up the new USB mount
wrk_restartSamba($redis);
// close Redis connection
$redis->close();
