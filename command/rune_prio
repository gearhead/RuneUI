#!/bin/bash
#
#  Copyright (C) 2013-2014 RuneAudio Team
#  http://www.runeaudio.com
#
#  RuneUI
#  copyright (C) 2013-2014 – Andrea Coiutti (aka ACX) & Simone De Gregori (aka Orion)
#
#  RuneOS
#  copyright (C) 2013-2014 – Simone De Gregori (aka Orion) & Carmelo San Giovanni (aka Um3ggh1U)
#
#  RuneAudio website and logo
#  copyright (C) 2013-2014 – ACX webdesign (Andrea Coiutti)
#
#  This Program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This Program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with RuneAudio; see the file COPYING. If not, see
#  <http://www.gnu.org/licenses/gpl-3.0.txt>.
#
#  file: command/rune_prio
#  version: 1.3
#  coder: Simone De Gregori
#
#####################################
set +e # continue on errors
prio_nice () {
# use the file /srv/http/db/prio_nice.txt
# loop through each record the file, each record contains the 'process name', the required nice value
#   and its default nice value separated by a spaces
while IFS="" read -r p || [ -n "$p" ] ; do
    # remove leading and trailing whitespace and replace embedded whitespace with one space
    p=$( echo "$p" | xargs )
    # skip empty and comment lines
    first_char=${p:0:1}
    if [ "$p" == "" ] || [ "$first_char" == ";" ] || [ "$first_char" == "#" ] ; then
        # empty line or comment
        continue
    fi
    # extract the process name
    process=""
    process=$( echo "$p" | cut -d ' ' -f 1 | xargs )
    if [ "$process" == "" ] ; then
        # no process
        continue
    fi
    # extract the required nice value as an integer and validate
    declare -i nice_val=40
    nice_val=$( echo "$p" | cut -d ' ' -f 2 | xargs )
    if [ $nice_val -lt -20 ] || [ $nice_val -gt 20 ] ; then
        # invalid required nice value
        continue
    fi
    # check that the process exists by getting the pid and validate
    pid=""
    pid=$( pgrep -w $process | xargs )
    if [ "$pid" == "" ] ; then
        # no pid
        continue
    fi
    # get the current nice value as an integer and validate (we can get more nice values returned)
    declare -i cur_nice=40
    declare -i n
    cur_nice_arr=$( ps --no-headers -o nice $( pgrep -w $process ) | sort -u | sed 's/[^0-9 -]*//g' | xargs )
    for n in $cur_nice_arr ; do
        if [ $n -lt -20 ] || [ $n -gt 20 ] ; then
            # invalid current nice value
            continue
        fi
        if [ $nice_val -lt 0 ] && [ $n -gt $nice_val ] ; then
            cur_nice=$(( n ))
            break
        elif [ $nice_val -gt 0 ] && [ $n -lt $nice_val ] ; then
            cur_nice=$(( n ))
            break
        elif [ $nice_val -eq 0 ] && [ $n -ne $nice_val ] ; then
            cur_nice=$(( n ))
            break
        fi
    done
    if [ $cur_nice -lt -20 ] || [ $cur_nice -gt 20 ] ; then
        # invalid current nice value
        continue
    fi
    # when the required nice value is negative, change it when the current nice value is higher
    # otherwise when the required nice value is positive, change it when the current nice value is lower
    # otherwise when the required nice value is zero, change it when the current nice value is non-zero
    #   we do this because some processes (e.g. mpd) rase or lower their niceness value automatically
    #   alter niceness is only when necessary
    if [ $nice_val -lt 0 ] && [ $cur_nice -gt $nice_val ] ; then
        # required nice negative
        renice $nice_val $( pgrep -w $process )
    elif [ $nice_val -gt 0 ] && [ $cur_nice -lt $nice_val ] ; then
        # required nice positive
        renice $nice_val $( pgrep -w $process )
    elif [ $nice_val -eq 0 ] && [ $cur_nice -ne $nice_val ] ; then
        # required nice zero
        renice $nice_val $( pgrep -w $process )
    fi
done < /srv/http/db/prio_nice.txt
#
# MPD has the capability of setting its own priority in real time
# the following is to make sure that its basis priority is set slightly lower
# when mpd is updating; keep its niceness to -1
mpd_updating=$( mpc status | xargs | grep -ic 'updating db' | xargs )
if [ "$mpd_updating" == "1" ] ; then
    renice -1 $(pgrep -w mpd)
fi
}
#
prio_default () {
# use the file /srv/http/db/prio_nice.txt
# loop through each record the file, each record contains the 'process name', the required nice value
#   and its default nice value separated by a spaces
while IFS="" read -r p || [ -n "$p" ] ; do
    # remove leading and trailing whitespace and replace embedded whitespace with one space
    p=$( echo "$p" | xargs )
    # skip empty and comment lines
    first_char=${p:0:1}
    if [ "$p" == "" ] || [ "$first_char" == ";" ] || [ "$first_char" == "#" ] ; then
        # empty line or comment
        continue
    fi
    # extract the process name
    process=""
    process=$( echo "$p" | cut -d ' ' -f 1 | xargs )
    if [ "$process" == "" ] ; then
        # no process
        continue
    fi
    # extract the required default nice value as an integer and validate
    declare -i default_nice=40
    default_nice=$( echo "$p" | cut -d ' ' -f 3 | xargs )
    if [ $default_nice -lt -20 ] || [ $default_nice -gt 20 ] ; then
        # invalid required nice value
        continue
    fi
    # check that the process exists by getting the pid and validate
    pid=""
    pid=$(  pgrep -w $process | xargs  )
    if [ "$pid" == "" ] ; then
        # no pid
        continue
    fi
    # get the current nice value as an integer and validate (we can get more nice values returned)
    declare -i cur_nice=40
    declare -i n
    cur_nice_arr=$( ps --no-headers -o nice $( pgrep -w $process ) | sort -u | sed 's/[^0-9 -]*//g' | xargs )
    for n in $cur_nice_arr ; do
        if [ $n -lt -20 ] || [ $n -gt 20 ] ; then
            # invalid current nice value
            continue
        fi
        if [ $n -ne $default_nice ] ; then
            cur_nice=$(( n ))
            break
        fi
    done
    if [ $cur_nice -lt -20 ] || [ $cur_nice -gt 20 ] ; then
        # invalid current nice value
        continue
    fi
    # when the default nice value differs from the current nice value change it
    # alter niceness is only when necessary
    if [ $cur_nice -ne $default_nice ] ; then
        # default nice and current nice differ
        renice $default_nice $( pgrep -w $process )
    fi
done < /srv/http/db/prio_nice.txt
}

if [ "$1" == "default" ]; then
    echo "set default priority settings"
    prio_default
    exit 0
fi

if [ "$1" == "nice" ]; then
    echo "set nice priority settings"
    prio_nice
    exit 0
fi

echo "RuneAudio process priority settings"
echo "Usage: $0 {default|nice}"
exit 1
